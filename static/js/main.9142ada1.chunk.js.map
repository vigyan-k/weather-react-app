{"version":3,"sources":["components/Icons.js","components/Search.js","components/Weather.js","components/DateTime.js","App.js","serviceWorker.js","index.js"],"names":["IconsRow","className","icon","faSun","faCloudRain","faSnowflake","faMoon","Search","faSearchLocation","Icons","action","onSubmit","this","props","handleSubmit","htmlFor","onChange","handleChange","type","placeholder","onClick","handleClick","Component","Weather","cityName","country","currentTemp","feelsLike","minTemp","maxTemp","weatherDescription","main","windSpeed","weatherIcon","undefined","faCloud","faCloudShowersHeavy","faBolt","faSmog","clothing","protection","id","faWind","faArrowDown","faArrowUp","DateTime","state","currentTime","Date","toLocaleDateString","setInterval","setState","toLocaleString","api","App","event","preventDefault","axios","url","method","responseType","params","q","appid","units","then","response","detailArray","push","data","isLoading","catch","error","alert","target","value","map","item","index","key","weather","name","sys","temp","feels_like","temp_min","temp_max","description","wind","speed","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"0TAeeA,EAXE,WACb,OACI,yBAAKC,UAAU,iBACX,kBAAC,IAAD,CAAiBC,KAAMC,IAAOF,UAAU,uBACxC,kBAAC,IAAD,CAAiBC,KAAME,IAAaH,UAAU,wBAC9C,kBAAC,IAAD,CAAiBC,KAAMG,IAAaJ,UAAU,uBAC9C,kBAAC,IAAD,CAAiBC,KAAMI,IAAQL,UAAU,yBCWtCM,E,uKAdP,OACI,yBAAKN,UAAU,mBACf,uCAAY,uCAAZ,KAAgC,kBAAC,IAAD,CAAiBC,KAAMM,IAAkBP,UAAU,gBACnF,kBAACQ,EAAD,MACA,0BAAMC,OAAO,GAAGC,SAAUC,KAAKC,MAAMC,cACnC,2BAAOC,QAAQ,SAASd,UAAU,mBAClC,2BAAOe,SAAUJ,KAAKC,MAAMI,aAAaC,KAAK,OAAOC,YAAY,UAEnE,4BAAQC,QAASR,KAAKC,MAAMQ,aAA5B,yB,GAVSC,aCyENC,EA1EC,SAAC,GAAwG,IAAvGC,EAAsG,EAAtGA,SAAUC,EAA4F,EAA5FA,QAASC,EAAmF,EAAnFA,YAAaC,EAAsE,EAAtEA,UAAWC,EAA2D,EAA3DA,QAASC,EAAkD,EAAlDA,QAASC,EAAyC,EAAzCA,mBAAoBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,UAEjGC,OAAcC,EAGdD,EADS,UAATF,EACc,kBAAC,IAAD,CAAiB7B,KAAMC,MACpB,WAAT4B,EACM,kBAAC,IAAD,CAAiB7B,KAAMiC,MACrB,SAATJ,EACO,kBAAC,IAAD,CAAiB7B,KAAMkC,MACnB,YAATL,EACK,kBAAC,IAAD,CAAiB7B,KAAME,MACrB,SAAT2B,EACO,kBAAC,IAAD,CAAiB7B,KAAMG,MACrB,iBAAT0B,EACO,kBAAC,IAAD,CAAiB7B,KAAMmC,MAEvB,kBAAC,IAAD,CAAiBnC,KAAMoC,MAGzC,IAAIC,OAAWL,EAGXK,EADAZ,EAAY,EACD,eACHA,EAAY,GACT,SACJA,EAAY,GACR,SACFA,EAAY,GACV,eAEA,UAGf,IAAIa,OAAaN,EAUjB,OAPIM,EADS,SAATT,EAA2B,YAATA,EAA8B,iBAATA,EAC1B,6BAED,6BAMZ,yBAAK9B,UAAU,QAAQwC,GAAG,SACtB,yBAAKxC,UAAU,QACX,yBAAKA,UAAU,oBACX,2BAAIuB,EAAJ,KAAgBC,IAEpB,yBAAKxB,UAAU,oBACX,2BAAIyB,EAAa,OAAjB,KACA,yCAAeC,EAAW,OAA1B,OAIR,yBAAK1B,UAAU,QACX,yBAAKA,UAAU,sBACX,uBAAGA,UAAU,eAAegC,EAAaH,GACzC,+BAAI,kBAAC,IAAD,CAAiB5B,KAAMwC,IAAOzC,UAAU,gBAA5C,UAAmE+B,EAAnE,SAEJ,yBAAK/B,UAAU,qBACX,2BAAG,kBAAC,IAAD,CAAiBC,KAAMyC,IAAY1C,UAAU,wBAAwB2B,EAAS,OAAjF,KACA,2BAAG,kBAAC,IAAD,CAAiB1B,KAAM0C,IAAW3C,UAAU,wBAA/C,IAAwE4B,EAAS,OAAjF,OAGR,yBAAK5B,UAAU,QACX,sCAAYsC,EAAZ,OACA,yCAAeR,EAAf,KAAuBS,MC7CxBK,E,kDAxBX,aAAc,IAAD,8BACb,gBACKC,MAAO,CACRC,aAAa,IAAIC,MAAOC,sBAHf,E,gEAOO,IAAD,OACfC,aAAa,WACT,EAAKC,SAAS,CACZJ,aAAc,IAAIC,MAAOI,qBAE3B,O,+BAIJ,OACI,yBAAKnD,UAAU,YACX,gDAAsBW,KAAKkC,MAAMC,kB,GAnB1BzB,aCKjB+B,G,MACE,qDADFA,EAEC,mCAFDA,EAGG,SAuGMC,E,kDAnGb,aAAc,IAAD,8BACX,gBAQFxC,aAAe,SAACyC,GACdA,EAAMC,iBACNC,IAAM,CACJC,IAAKL,EACLM,OAAQ,MACRC,aAAa,OACbC,OAAQ,CACNC,EAAE,EAAKhB,MAAMtB,SACbuC,MAAOV,EACPW,MAAOX,KAERY,MAAK,SAACC,GACP,IAAIC,EAAc,GAClBA,EAAYC,KAAKF,EAASG,MAC1B,EAAKlB,SAAS,CACZgB,cACAG,WAAW,OAEZC,OAAM,SAACC,GACRC,MAAM,uDA5BG,EAgCbxD,aAAe,SAACsC,GACd,EAAKJ,SAAS,CACZ3B,SAAU+B,EAAMmB,OAAOC,SAlCd,EAsCbtD,YAAc,SAACkC,GACbA,EAAMC,iBACNC,IAAM,CACJC,IAAKL,EACLM,OAAQ,MACRC,aAAa,OACbC,OAAQ,CACNC,EAAE,EAAKhB,MAAMtB,SACbuC,MAAOV,EACPW,MAAOX,KAERY,MAAK,SAACC,GACP,IAAIC,EAAc,GAClBA,EAAYC,KAAKF,EAASG,MAC1B,EAAKlB,SAAS,CACZgB,cACAG,WAAW,OAEZC,OAAM,SAACC,GACRC,MAAM,uDAvDR,EAAK3B,MAAQ,CACXqB,YAAa,GACb3C,SAAU,GACV8C,WAAW,GALF,E,qDA8DX,OACE,yBAAKrE,UAAU,QACb,yBAAKA,UAAU,WACb,kBAAC,EAAD,CAAQoB,YAAaT,KAAKS,YAAaP,aAAcF,KAAKE,aAAcG,aAAcL,KAAKK,eAC3F,yBAAKhB,UAAU,YACdW,KAAKkC,MAAMwB,UAAY,4CAAuB1D,KAAKkC,MAAMqB,YAAYS,KAAK,SAACC,EAAMC,GAChF,OACE,kBAAC,EAAD,CACAC,IAAOD,EACPA,MAASD,EAAKG,QAAQvC,GACtBjB,SAAYqD,EAAKI,KACjBxD,QAAWoD,EAAKK,IAAIzD,QACpBC,YAAemD,EAAK9C,KAAKoD,KACzBxD,UAAakD,EAAK9C,KAAKqD,WACvBxD,QAAWiD,EAAK9C,KAAKsD,SACrBxD,QAAWgD,EAAK9C,KAAKuD,SACrBxD,mBAAsB+C,EAAKG,QAAQ,GAAGO,YACtCxD,KAAQ8C,EAAKG,QAAQ,GAAGjD,KACxBC,UAAa6C,EAAKW,KAAKC,WAK3B,kBAAC,EAAD,QAGF,gCACE,yBAAKxF,UAAU,aACf,oE,GA3FQqB,aCDEoE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdjC,OAAM,SAAAC,GACLiC,QAAQjC,MAAMA,EAAMkC,c","file":"static/js/main.9142ada1.chunk.js","sourcesContent":["import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSun, faSnowflake, faCloudRain, faMoon} from '@fortawesome/free-solid-svg-icons';\n\nconst IconsRow = () => {\n    return (\n        <div className='iconContainer'>\n            <FontAwesomeIcon icon={faSun} className='sunny weatherIcons'/>\n            <FontAwesomeIcon icon={faCloudRain} className='cloudy weatherIcons'/>\n            <FontAwesomeIcon icon={faSnowflake} className='rainy weatherIcons'/>\n            <FontAwesomeIcon icon={faMoon} className='moony weatherIcons'/>\n        </div>\n    )\n}\n\nexport default IconsRow;","import React, { Component } from 'react';\nimport IconsRow from './Icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearchLocation } from '@fortawesome/free-solid-svg-icons';\n\nclass Search extends Component{\n      render(){\n        return(\n            <div className='searchContainer'>\n            <h1>Weather <span>Radar</span>  <FontAwesomeIcon icon={faSearchLocation} className='searchIcon'/></h1>\n            <IconsRow />\n            <form action=\"\" onSubmit={this.props.handleSubmit}>\n              <label htmlFor=\"search\" className='visuallyHidden'></label>\n              <input onChange={this.props.handleChange}type=\"text\" placeholder='City' />\n            </form>\n            <button onClick={this.props.handleClick}>Get the Weather!</button>\n          </div>\n        )\n    }\n}\n\nexport default Search;","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowUp, faArrowDown, faBolt, faCloudRain, faCloudShowersHeavy, faSnowflake, faSun, faCloud, faSmog, faWind} from '@fortawesome/free-solid-svg-icons';\n\nconst Weather = ({cityName, country, currentTemp, feelsLike, minTemp, maxTemp, weatherDescription, main, windSpeed}) => {\n\n    let weatherIcon = undefined;\n\n    if (main === 'Clear') {\n        weatherIcon = <FontAwesomeIcon icon={faSun} />;\n    }  else if (main === 'Clouds') {\n        weatherIcon = <FontAwesomeIcon icon={faCloud} />;\n    } else if (main === 'Rain') {\n        weatherIcon = <FontAwesomeIcon icon={faCloudShowersHeavy} />;\n    }   else if (main === 'Drizzle') {\n        weatherIcon = <FontAwesomeIcon icon={faCloudRain} />;\n    } else if (main === 'Snow') {\n        weatherIcon = <FontAwesomeIcon icon={faSnowflake} />;\n    } else if (main === 'Thunderstorm') {\n        weatherIcon = <FontAwesomeIcon icon={faBolt} />;\n    } else {\n        weatherIcon = <FontAwesomeIcon icon={faSmog} />;\n    }\n\n    let clothing = undefined;\n\n    if (feelsLike < 0) {\n        clothing = 'Heavy Jacket';\n    }  else if (feelsLike < 10 ) {\n        clothing = 'Jacket';\n    } else if (feelsLike < 15 ) {\n        clothing = 'Jumper';\n    }   else if (feelsLike < 20) {\n        clothing = 'Light Jacket';\n    }  else {\n        clothing = 'T-shirt';\n    }\n\n    let protection = undefined;\n\n    if (main === 'Rain' | main === 'Drizzle' | main === 'Thunderstorm' ) {\n        protection = 'you might need an Umbrella';\n    } else {\n       protection = \"you don't need an umbrella\";\n    }\n\n    \n    \n    return (\n        <div className='modal' id='modal'>\n            <div className='row1'>\n                <div className='square squareOne'>\n                    <p>{cityName}, {country}</p>\n                </div>\n                <div className='square squareTwo'>\n                    <p>{currentTemp}{'\\u00b0'}C</p>\n                    <p>Feels like {feelsLike}{'\\u00b0'}C</p>\n                </div>\n            </div>\n\n            <div className=\"row2\">\n                <div className='square squareThree'>\n                    <p className='weatherIcon'>{weatherIcon}{weatherDescription}</p>\n                    <p> <FontAwesomeIcon icon={faWind}className='weatherIcon'/> Wind: {windSpeed} m/s</p>\n                </div>\n                <div className='square squareFour'>\n                    <p><FontAwesomeIcon icon={faArrowDown}className='weatherIcon chevron'/>{minTemp}{'\\u00b0'}C</p>\n                    <p><FontAwesomeIcon icon={faArrowUp} className='weatherIcon chevron'/> {maxTemp}{'\\u00b0'}C</p>\n                </div>\n            </div>\n            <div className=\"row3\">\n                <p> Wear a {clothing} ! </p>\n                <p> Primarily {main}, {protection}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Weather;","import React, {Component} from 'react';\n\nclass DateTime extends Component{\n    constructor(){\n    super();\n    this.state ={\n        currentTime: new Date().toLocaleDateString()\n        }\n    }\n\n    componentDidMount(){\n        setInterval( () => {\n            this.setState({\n              currentTime : new Date().toLocaleString()\n            })\n          },1000)\n    }\n\n    render(){\n        return(\n            <div className='dateTime'>\n                <p>Currently, it is: {this.state.currentTime}</p>\n            </div>\n        )\n    }\n};\n\nexport default DateTime;","import React, {Component} from 'react';\nimport axios from 'axios';\nimport Search from './components/Search.js'\nimport Weather from './components/Weather.js';\nimport DateTime from './components/DateTime.js';\nimport './App.css';\n\nconst api = {\n  base: 'https://api.openweathermap.org/data/2.5/weather?/',\n  key: '9337001bff95870d0f26deeb07c4be6f',\n  units: 'metric'\n}\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      detailArray: [],\n      cityName: '',\n      isLoading: true\n    }\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    axios({\n      url: api.base,\n      method: 'GET',\n      responseType:'JSON',\n      params: {\n        q:this.state.cityName,\n        appid: api.key,\n        units: api.units\n      }, \n    }).then((response) => {\n      let detailArray = [];\n      detailArray.push(response.data);\n      this.setState({\n        detailArray,\n        isLoading: false\n      })\n    }).catch((error)=>{\n      alert('There were no matching cities, please try again')\n    })\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      cityName: event.target.value\n    })\n  }\n\n  handleClick = (event) => {\n    event.preventDefault();\n    axios({\n      url: api.base,\n      method: 'GET',\n      responseType:'JSON',\n      params: {\n        q:this.state.cityName,\n        appid: api.key,\n        units: api.units\n      }, \n    }).then((response) => {\n      let detailArray = [];\n      detailArray.push(response.data);\n      this.setState({\n        detailArray,\n        isLoading: false\n      })\n    }).catch((error)=>{\n      alert('There were no matching cities, please try again')\n    })\n  }\n\n  render(){\n    return (\n      <div className='main'>\n        <div className=\"wrapper\">\n          <Search handleClick={this.handleClick} handleSubmit={this.handleSubmit} handleChange={this.handleChange}/>\n          <div className='colorBox'>\n          {this.state.isLoading ? <p>Enter a City!</p> : this.state.detailArray.map( (item, index) => { \n            return (\n              <Weather\n              key = {index}\n              index = {item.weather.id}\n              cityName = {item.name}\n              country = {item.sys.country}\n              currentTemp = {item.main.temp}\n              feelsLike = {item.main.feels_like}\n              minTemp = {item.main.temp_min}\n              maxTemp = {item.main.temp_max}\n              weatherDescription = {item.weather[0].description}\n              main = {item.weather[0].main}\n              windSpeed = {item.wind.speed}\n              />\n            )\n          })\n          }\n          <DateTime />\n          </div>\n        </div>\n        <footer>\n          <div className='copyright'>\n          <p>Copyright Vigyan Kayastha 2020</p>\n          </div>\n        </footer>\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}